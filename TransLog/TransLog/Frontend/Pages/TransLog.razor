@page "/TransLog"
@using Frontend.Models.Request
@using Frontend.Models.Response

<h3>TransLog</h3>


<EditForm Model="_cargaRequest" OnValidSubmit="Gerar">
    <DataAnnotationsValidator/>


    <div class="row">
        <div class="col-4">
            <label>Nome do cliente</label>
            <InputText @bind-Value="_cargaRequest.Nome" class="form-control"/>
            <ValidationMessage For="() => _cargaRequest.Nome"/>
        </div>

        <div class="col-4">
            <label>Peso da carga</label>
            <InputText @bind-Value="_clienteRequest.Peso" class="form-control" />
        </div>
        <div class="col-4">
            <label>Altura da carga</label>
            <InputText @bind-Value="_clienteRequest.Altura" class="form-control" />
            <ValidationMessage For="() => _clienteRequest.Altura" />
        </div>
        <div class="col-4">
            <label>Largura da carga</label>
            <InputText @bind-Value="_clienteRequest.Largura" class="form-control" />
            <ValidationMessage For="() => _clienteRequest.Largura" />
        </div>
        <div class="col-4">
            <label>Distancia percorrida</label>
            <InputText @bind-Value="_clienteRequest.Distancia" class="form-control" />
            <ValidationMessage For="() => _clienteRequest.Distancia" />
        </div>






        <div class="col-2">
            <button type="submit" class="btn btn-outline-primary mt-2">Gerar carteirinha</button>
        </div>
    </div>
</EditForm>



@code {

    private CargaRequest _cargaRequest { get; set; } = new();
    private CargaResponse _cargaResponse { get; set; } = new();

    private bool exibirCarteira = false;

    private async Task Gerar()
    {


        try
        {
            

        }

      
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }



    }
}
